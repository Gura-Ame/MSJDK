#
# Copyright (c) 2022, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

name: 'Build Release'

on:
  push:
    branches-ignore:
      - master
      - pr/*
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platform(s) to execute on (comma separated, e.g. "linux-x64, macos, aarch64")'
        required: true
        default: 'linux-x64
      configure-arguments:
        description: 'Additional configure arguments'
        required: false
      make-arguments:
        description: 'Additional make arguments'
        required: false

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    name: 'Prepare the run'
    runs-on: ubuntu-22.04
    outputs:
      linux-x64: ${{ steps.include.outputs.linux-x64 }}
      linux-x86-hs: ${{ steps.include.outputs.linux-x86-hs }}
      linux-x64-variants: ${{ steps.include.outputs.linux-x64-variants }}
      linux-cross-compile: ${{ steps.include.outputs.linux-cross-compile }}
      macos-x64: ${{ steps.include.outputs.macos-x64 }}
      macos-aarch64: ${{ steps.include.outputs.macos-aarch64 }}
      windows-x64: ${{ steps.include.outputs.windows-x64 }}
      windows-aarch64: ${{ steps.include.outputs.windows-aarch64 }}

    steps:
      - name: 'Checkout the scripts'
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            make/conf/github-actions.conf

      # TODO: Now that we are checking out the repo scripts, we can put the following code
      # into a separate file
      - name: 'Check what jobs to run'
        id: include
        run: |
          # Determine which platform jobs to run

          # Returns 'true' if the input platform list matches any of the platform monikers given as argument,
          # 'false' otherwise.
          # arg $1: platform name or names to look for
          function check_platform() {
            if [[ $GITHUB_EVENT_NAME == workflow_dispatch ]]; then
              input='${{ github.event.inputs.platforms }}'
            elif [[ $GITHUB_EVENT_NAME == push ]]; then
              if [[ '${{ !secrets.JDK_SUBMIT_FILTER || startsWith(github.ref, 'refs/heads/submit/') }}' == 'false' ]]; then
                # If JDK_SUBMIT_FILTER is set, and this is not a "submit/" branch, don't run anything
                >&2 echo 'JDK_SUBMIT_FILTER is set and not a "submit/" branch'
                echo 'false'
                return
              else
                input='${{ secrets.JDK_SUBMIT_PLATFORMS }}'
              fi
            fi

            normalized_input="$(echo ,$input, | tr -d ' ')"
            if [[ "$normalized_input" == ",," ]]; then
              # For an empty input, assume all platforms should run
              echo 'true'
              return
            else
              # Check for all acceptable platform names
              for part in $* ; do
                if echo "$normalized_input" | grep -q -e ",$part," ; then
                  echo 'true'
                  return
                fi
              done
            fi

            echo 'false'
          }

          echo "linux-x64=$(check_platform linux-x64 linux x64)" >> $GITHUB_OUTPUT
          echo "linux-x86-hs=$(check_platform linux-x86-hs linux x86)" >> $GITHUB_OUTPUT
          echo "linux-x64-variants=$(check_platform linux-x64-variants variants)" >> $GITHUB_OUTPUT
          echo "linux-cross-compile=$(check_platform linux-cross-compile cross-compile)" >> $GITHUB_OUTPUT
          echo "macos-x64=$(check_platform macos-x64 macos x64)" >> $GITHUB_OUTPUT
          echo "macos-aarch64=$(check_platform macos-aarch64 macos aarch64)" >> $GITHUB_OUTPUT
          echo "windows-x64=$(check_platform windows-x64 windows x64)" >> $GITHUB_OUTPUT
          echo "windows-aarch64=$(check_platform windows-aarch64 windows aarch64)" >> $GITHUB_OUTPUT

  build-linux:
    needs: prepare
    platform: linux-x64
    name: build
    runs-on: ubuntu-22.04
    gcc-major-version: '10'
    configure-arguments: ${{ github.event.inputs.configure-arguments }}
    make-arguments: ${{ github.event.inputs.make-arguments }}

    strategy:
      matrix:
        debug-level: ${{ fromJSON(inputs.debug-levels) }}
        include:
          - debug-level: debug
            flags: --with-debug-level=fastdebug
            suffix: -debug
          - debug-level: release
            flags: --with-debug-level=release
            suffix: ''

    steps:
      - name: 'Checkout the JDK source'
        uses: actions/checkout@v4

      - name: 'Get the BootJDK'
        id: bootjdk
        uses: ./.github/actions/get-bootjdk
        with:
          platform: linux-x64

      - name: 'Set architecture'
        id: arch
        run: |
          # Set a proper suffix for packages if using a different architecture
          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then
            echo 'suffix=:${{ inputs.apt-architecture }}' >> $GITHUB_OUTPUT
          fi

      # Upgrading apt to solve libc6 installation bugs, see JDK-8260460.
      - name: 'Install toolchain and dependencies'
        run: |
          # Install dependencies using apt-get
          if [[ '${{ inputs.apt-architecture }}' != '' ]]; then
            sudo dpkg --add-architecture ${{ inputs.apt-architecture }}
          fi
          sudo apt-get update
          sudo apt-get install --only-upgrade apt
          sudo apt-get install gcc-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} g++-${{ inputs.gcc-major-version }}${{ inputs.gcc-package-suffix }} libxrandr-dev${{ steps.arch.outputs.suffix }} libxtst-dev${{ steps.arch.outputs.suffix }} libcups2-dev${{ steps.arch.outputs.suffix }} libasound2-dev${{ steps.arch.outputs.suffix }} ${{ inputs.apt-extra-packages }}
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ inputs.gcc-major-version }} 100 --slave /usr/bin/g++ g++ /usr/bin/g++-${{ inputs.gcc-major-version }}

      - name: 'Configure'
        run: >
          bash configure
          --with-conf-name=${{ inputs.platform }}
          ${{ matrix.flags }}
          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}
          --with-boot-jdk=${{ steps.bootjdk.outputs.path }}
          --with-jtreg=${{ steps.jtreg.outputs.path }}
          --with-gtest=${{ steps.gtest.outputs.path }}
          --enable-jtreg-failure-handler
          --with-zlib=system
          ${{ inputs.extra-conf-options }} ${{ inputs.configure-arguments }} || (
          echo "Dumping config.log:" &&
          cat config.log &&
          exit 1)

      - name: 'Build'
        id: build
        uses: ./.github/actions/do-build
        with:
          make-target: '${{ inputs.make-target }} ${{ inputs.make-arguments }}'
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

      - name: 'Upload bundles'
        uses: ./.github/actions/upload-bundles
        with:
          platform: ${{ inputs.platform }}
          debug-suffix: '${{ matrix.suffix }}'

      - name: 'Create Release and Upload Artifacts'
        if: github.ref == 'refs/heads/main' && matrix.debug-level == 'release'
        uses: softprops/action-gh-release@v1
        with:
          name: MSJDK17 Build ${{ github.run_number }}
          tag_name: msjdk17-${{ github.run_number }}
          files: |
            build/${{ inputs.platform }}${{ matrix.suffix }}/bundles/*.tar.gz
            build/${{ inputs.platform }}${{ matrix.suffix }}/bundles/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
