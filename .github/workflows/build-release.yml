name: Build and Release JDK for All Platforms  
  
on:  
  push:  
    tags:  
      - 'v*'  
  workflow_dispatch:  
    inputs:  
      release_name:  
        description: 'Release name'  
        required: true  
        default: 'MSJDK17-Release'  
  
jobs:  
  build-matrix:  
    strategy:  
      fail-fast: false  
      matrix:  
        include:  
          # Linux builds  
          - os: ubuntu-20.04  
            platform: linux  
            arch: x64  
            configure_args: --with-debug-level=release  
          - os: ubuntu-20.04  
            platform: linux  
            arch: aarch64  
            configure_args: --with-debug-level=release --openjdk-target=aarch64-linux-gnu  
          - os: ubuntu-20.04  
            platform: linux  
            arch: arm32  
            configure_args: --with-debug-level=release --openjdk-target=arm-linux-gnueabihf  
          - os: ubuntu-20.04  
            platform: linux  
            arch: ppc64le  
            configure_args: --with-debug-level=release --openjdk-target=ppc64le-linux-gnu  
          - os: ubuntu-20.04  
            platform: linux  
            arch: s390x  
            configure_args: --with-debug-level=release --openjdk-target=s390x-linux-gnu  
            
          # macOS builds  
          - os: macos-11  
            platform: macos  
            arch: x64  
            configure_args: --with-debug-level=release  
          - os: macos-11  
            platform: macos  
            arch: aarch64  
            configure_args: --with-debug-level=release --openjdk-target=aarch64-apple-darwin  
            
          # Windows builds  
          - os: windows-2019  
            platform: windows  
            arch: x64  
            configure_args: --with-debug-level=release  
          - os: windows-2019  
            platform: windows  
            arch: x86  
            configure_args: --with-debug-level=release --openjdk-target=x86-pc-windows-msvc  
          - os: windows-2019  
            platform: windows  
            arch: aarch64  
            configure_args: --with-debug-level=release --openjdk-target=aarch64-pc-windows-msvc  
  
    runs-on: ${{ matrix.os }}  
      
    name: Build ${{ matrix.platform }}-${{ matrix.arch }}  
      
    steps:  
      - name: Checkout code  
        uses: actions/checkout@v3  
          
      - name: Set up build environment (Linux)  
        if: matrix.platform == 'linux'  
        run: |  
          sudo apt-get update  
          sudo apt-get install -y build-essential autoconf zip unzip libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev libxt-dev libcups2-dev libfontconfig1-dev libasound2-dev  
            
      - name: Set up build environment (macOS)  
        if: matrix.platform == 'macos'  
        run: |  
          brew install autoconf  
            
      - name: Set up build environment (Windows)  
        if: matrix.platform == 'windows'  
        uses: microsoft/setup-msbuild@v1.1  
          
      - name: Set up cross-compilation toolchain  
        if: matrix.arch != 'x64' && matrix.platform == 'linux'  
        run: |  
          case "${{ matrix.arch }}" in  
            aarch64) sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu ;;  
            arm32) sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf ;;  
            ppc64le) sudo apt-get install -y gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu ;;  
            s390x) sudo apt-get install -y gcc-s390x-linux-gnu g++-s390x-linux-gnu ;;  
          esac  
            
      - name: Download and set up Boot JDK  
        run: |  
          if [[ "${{ matrix.platform }}" == "windows" ]]; then  
            curl -L -o bootjdk.zip "https://download.java.net/java/GA/jdk16/7863447f0ab643c585b9bdebf67c69db/36/GPL/openjdk-16_windows-x64_bin.zip"  
            unzip bootjdk.zip  
            echo "BOOT_JDK=$(pwd)/jdk-16" >> $GITHUB_ENV  
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then  
            curl -L -o bootjdk.tar.gz "https://download.java.net/java/GA/jdk16/7863447f0ab643c585b9bdebf67c69db/36/GPL/openjdk-16_osx-x64_bin.tar.gz"  
            tar xzf bootjdk.tar.gz  
            echo "BOOT_JDK=$(pwd)/jdk-16.jdk/Contents/Home" >> $GITHUB_ENV  
          else  
            curl -L -o bootjdk.tar.gz "https://download.java.net/java/GA/jdk16/7863447f0ab643c585b9bdebf67c69db/36/GPL/openjdk-16_linux-x64_bin.tar.gz"  
            tar xzf bootjdk.tar.gz  
            echo "BOOT_JDK=$(pwd)/jdk-16" >> $GITHUB_ENV  
          fi  
        shell: bash  
          
      - name: Configure build  
        run: |  
          if [[ "${{ matrix.platform }}" == "windows" ]]; then  
            bash configure --with-boot-jdk="$BOOT_JDK" ${{ matrix.configure_args }} --with-toolchain-type=microsoft  
          else  
            bash configure --with-boot-jdk="$BOOT_JDK" ${{ matrix.configure_args }}  
          fi  
        shell: bash  
          
      - name: Build JDK  
        run: |  
          make images  
        shell: bash  
          
      - name: Create distribution archive  
        run: |  
          cd build/*/images  
          if [[ "${{ matrix.platform }}" == "windows" ]]; then  
            zip -r ../../../msjdk17-${{ matrix.platform }}-${{ matrix.arch }}.zip jdk  
          else  
            tar czf ../../../msjdk17-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz jdk  
          fi  
        shell: bash  
          
      - name: Upload build artifact  
        uses: actions/upload-artifact@v3  
        with:  
          name: msjdk17-${{ matrix.platform }}-${{ matrix.arch }}  
          path: |  
            msjdk17-${{ matrix.platform }}-${{ matrix.arch }}.zip  
            msjdk17-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz  
  
  create-release:  
    needs: build-matrix  
    runs-on: ubuntu-latest  
    if: startsWith(github.ref, 'refs/tags/')  
      
    steps:  
      - name: Download all artifacts  
        uses: actions/download-artifact@v3  
          
      - name: Create Release  
        id: create_release  
        uses: actions/create-release@v1  
        env:  
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  
        with:  
          tag_name: ${{ github.ref_name }}  
          release_name: ${{ github.event.inputs.release_name || format('MSJDK17 Release {0}', github.ref_name) }}  
          draft: false  
          prerelease: false  
            
      - name: Upload Release Assets  
        run: |  
          for artifact_dir in msjdk17-*/; do  
            for file in "$artifact_dir"*; do  
              if [[ -f "$file" ]]; then  
                echo "Uploading $file"  
                curl -X POST \  
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \  
                  -H "Content-Type: application/octet-stream" \  
                  --data-binary @"$file" \  
                  "${{ steps.create_release.outputs.upload_url }}=$(basename "$file")"  
              fi  
            done  
          done