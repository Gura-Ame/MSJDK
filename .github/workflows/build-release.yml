name: Build and Release JDK for All Platforms

on:
  push:
    branches-ignore:
      - master
      - pr/*
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Release name'
        required: true
        default: 'MSJDK17-Release'

jobs:
  build-matrix:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-22.04
            platform: linux
            arch: x64
            configure_args: --with-debug-level=release
          - os: ubuntu-22.04
            platform: linux
            arch: aarch64
            configure_args: --with-debug-level=release --openjdk-target=aarch64-linux-gnu
          - os: ubuntu-22.04
            platform: linux
            arch: arm32
            configure_args: --with-debug-level=release --openjdk-target=arm-linux-gnueabihf
          - os: ubuntu-22.04
            platform: linux
            arch: ppc64le
            configure_args: --with-debug-level=release --openjdk-target=ppc64le-linux-gnu
          - os: ubuntu-22.04
            platform: linux
            arch: s390x
            configure_args: --with-debug-level=release --openjdk-target=s390x-linux-gnu
            
          # macOS builds
          - os: macos-14
            platform: macos
            arch: x64
            configure_args: --with-debug-level=release
          - os: macos-14
            platform: macos
            arch: aarch64
            configure_args: --with-debug-level=release --openjdk-target=aarch64-apple-darwin
            
          # Windows builds
          - os: windows-2022
            platform: windows
            arch: x64
            configure_args: --with-debug-level=release
          - os: windows-2022
            platform: windows
            arch: x86
            configure_args: --with-debug-level=release --openjdk-target=x86-pc-windows-msvc
          - os: windows-2022
            platform: windows
            arch: aarch64
            configure_args: --with-debug-level=release --openjdk-target=aarch64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    
    name: Build ${{ matrix.platform }}-${{ matrix.arch }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Linux environment setup
      - name: Set up build environment (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential autoconf zip unzip \
            libx11-dev libxext-dev libxrender-dev libxrandr-dev libxtst-dev \
            libxt-dev libcups2-dev libfontconfig1-dev libasound2-dev \
            libfreetype6-dev pkg-config
          
      # macOS environment setup  
      - name: Set up build environment (macOS)
        if: matrix.platform == 'macos'
        run: |
          brew install autoconf
          
      # Windows environment setup
      - name: Set up build environment (Windows)
        if: matrix.platform == 'windows'
        run: |
          choco install autoconf-archive -y
          # Install Visual Studio Build Tools if needed
          if (!(Test-Path "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC")) {
            choco install visualstudio2022buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools" -y
          }
        shell: powershell

      # Cross-compilation toolchain setup for Linux
      - name: Set up cross-compilation toolchain
        if: matrix.arch != 'x64' && matrix.platform == 'linux'
        run: |
          case "${{ matrix.arch }}" in
            aarch64) 
              sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              ;;
            arm32) 
              sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
              ;;
            ppc64le) 
              sudo apt-get install -y gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu
              ;;
            s390x) 
              sudo apt-get install -y gcc-s390x-linux-gnu g++-s390x-linux-gnu
              ;;
          esac
          
      # Boot JDK setup
      - name: Download and set up Boot JDK
        run: |
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            curl -L -o bootjdk.zip "https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL/openjdk-17_windows-x64_bin.zip"
            unzip bootjdk.zip
            echo "BOOT_JDK=$(pwd)/jdk-17" >> $GITHUB_ENV
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then
            curl -L -o bootjdk.tar.gz "https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL/openjdk-17_osx-x64_bin.tar.gz"
            tar xzf bootjdk.tar.gz
            echo "BOOT_JDK=$(pwd)/jdk-17.jdk/Contents/Home" >> $GITHUB_ENV
          else
            curl -L -o bootjdk.tar.gz "https://download.java.net/java/GA/jdk17/0d483333a00540d886896bac774ff48b/35/GPL/openjdk-17_linux-x64_bin.tar.gz"
            tar xzf bootjdk.tar.gz
            echo "BOOT_JDK=$(pwd)/jdk-17" >> $GITHUB_ENV
          fi
        shell: bash
        
      # Configure build
      - name: Configure build
        run: |
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            # Set up Visual Studio environment
            call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
            bash configure --with-boot-jdk="$BOOT_JDK" ${{ matrix.configure_args }} --with-toolchain-type=microsoft
          else
            bash configure --with-boot-jdk="$BOOT_JDK" ${{ matrix.configure_args }}
          fi
        shell: bash
        
      # Build JDK
      - name: Build JDK
        run: |
          make images
        shell: bash
        
      # Create distribution archive
      - name: Create distribution archive
        run: |
          cd build/*/images
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            7z a -tzip ../../../msjdk17-${{ matrix.platform }}-${{ matrix.arch }}.zip jdk
          else
            tar czf ../../../msjdk17-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz jdk
          fi
        shell: bash
        
      # Upload build artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: msjdk17-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            msjdk17-${{ matrix.platform }}-${{ matrix.arch }}.zip
            msjdk17-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz
          retention-days: 30

  create-release:
    needs: build-matrix
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.event.inputs.release_name || format('MSJDK17 Release {0}', github.ref_name) }}
          prerelease: false
          files: |
            msjdk17-*/*.zip
            msjdk17-*/*.tar.gz